knitr::opts_chunk$set(echo = TRUE)
df=read.csv("Chicago Police Stops Dataset.csv")
df
str(df)
summary(df)
colSums(is.na(df))
data=read.csv("Chicago Police Stops Dataset.csv")
data
str(data)
# Importing required libraries for the EDA.
library(ezids)
library(ggplot2)
xbalesummary(df)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(dataset))
colSums(is.na(data))
#removing missing values
cleaned_data<-na.omit(data)
str(data)
#removing missing values
cleaned_data<-na.omit(data)
str(cleaned_data)
xkablesummary(cleaned_data)
xkablesummary(cleaned_data, title = "Summary of Cleaned Dataset")
nrow(cleaned_data)
colSums(is.na(cleaned_data))
nrow(cleaned_data)
colSums(is.na(cleaned_data))
knitr::opts_chunk$set(echo = TRUE)
arrest_race <- table(cleaned_data$subject_race, cleaned_data$arrest_made)
prop.table(arrest_race, 1)
barplot(prop.table(arrest_race, 1), beside=TRUE, col=c("lightblue", "red"), main="Proportion of Arrests by Race")
barplot(table(cleaned_data$subject_race), main="Distribution of Stops by Race", col="lightblue")
# Just an initial exploration
barplot(table(cleaned_data$subject_race), main="Distribution of Stops by Race", col="lightblue")
boxplot(cleaned_data$age ~ cleaned_data$subject_race, main="Age Distribution by Race")
colnames(cleaned_data)  # Check column names in the dataset
boxplot(cleaned_data$subject_age ~ cleaned_data$subject_race, main="Age Distribution by Race")
boxplot(cleaned_data$subject_age ~ cleaned_data$subject_race, main="Age Distribution by Race")
boxplot(cleaned_data$officer_age ~ cleaned_data$subject_race, main="Officer Age vs Subject Race")
boxplot(cleaned_data$officer_age ~ cleaned_data$subject_race, main="Officer Age vs Subject Race")
clean_subject_age=outlierKD2(clean_dataset,subject_age,rm=TRUE,qqplt = TRUE)
library(ezids)
clean_subject_age=outlierKD2(clean_dataset,subject_age,rm=TRUE,qqplt = TRUE)
clean_subject_age=outlierKD2(cleaned_data,subject_age,rm=TRUE,qqplt = TRUE)
cleansubject_age=outlierKD2(cleaned_data,subject_age,rm=TRUE,qqplt = TRUE)
cleanofficer_age=outlierKD2(cleaned_data,officer_age,rm=TRUE,qqplt = TRUE)
cleanofficer_age=outlierKD2(cleaned_data,officer_age,rm=TRUE,qqplt = TRUE)
# updating the cleaned data for the subject_age column
cleaned_data$subject_age <- cleansubject_age
# Similarly for officer_age
cleaned_data$officer_age <- cleanofficer_age
nrow(cleaned_data)
length(cleaned_data$subject_age)  # Total number of rows in 'subject_age' column
```{r}
boxplot(cleaned_data$subject_age ~ cleaned_data$subject_race, main="Age Distribution by Race")
boxplot(cleaned_data$subject_age ~ cleaned_data$subject_race, main="Age Distribution by Race")
str(cleansubject_age)  # Check the structure of cleansubject_age
str(cleanofficer_age)  # Check the structure of cleanofficer_age
str(cleaned_data)
# Check if the columns are dataframes
str(cleaned_data$subject_age)
str(cleaned_data$officer_age)
# If they are nested dataframes, extract the numeric values:
cleaned_data$subject_age <- cleaned_data$subject_age$subject_age
cleaned_data$officer_age <- cleaned_data$officer_age$officer_age
# If they are nested dataframes, extract the numeric values:
cleaned_data$subject_age <- cleaned_data$subject_age$subject_age
# Check if the columns are dataframes
str(cleaned_data$subject_age)
str(cleaned_data$officer_age)
# If they are nested dataframes, extract the numeric values:
cleaned_data$subject_age <- cleaned_data$subject_age$subject_age
cleansubject_age=outlierKD2(cleaned_data,subject_age,rm=TRUE,qqplt = TRUE)
cleanofficer_age=outlierKD2(cleaned_data,officer_age,rm=TRUE,qqplt = TRUE)
# Extract the original values from the nested dataframe
cleaned_data$subject_age <- cleansubject_age$subject_age
cleaned_data$officer_age <- cleanofficer_age$officer_age
str(Cleaned_data)
str(cleaned_data)
str(cleaned_data)
cleansubject_age=outlierKD2(cleaned_data,subject_age,rm=TRUE,qqplt = TRUE)
boxplot(cleaned_data$subject_age ~ cleaned_data$subject_race, main="Age Distribution by Race")
knitr::opts_chunk$set(echo = TRUE)
# Importing required libraries for the EDA.
library(ezids)
library(ggplot2)
data=read.csv("Chicago Police Stops Dataset.csv")
data
str(data)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
#removing missing values
cleaned_data<-na.omit(data)
str(cleaned_data)
xkablesummary(cleaned_data, title = "Summary of Cleaned Dataset")
colSums(is.na(cleaned_data))
# Just an initial exploration
barplot(table(cleaned_data$subject_race), main="Distribution of Stops by Race", col="lightblue")
boxplot(cleaned_data$subject_age ~ cleaned_data$subject_race, main="Age Distribution by Race")
boxplot(cleaned_data$officer_age ~ cleaned_data$subject_race, main="Officer Age vs Subject Race")
boxplot(cleaned_data$officer_age ~ cleaned_data$subject_race, main="Officer Age vs Subject Race")
cleansubject_age=outlierKD2(cleaned_data,subject_age,rm=TRUE,qqplt = TRUE)
cleanofficer_age=outlierKD2(cleaned_data,officer_age,rm=TRUE,qqplt = TRUE)
str(cleaned_data)
# Removing outliers from subject_age using IQR
Q1_subject <- quantile(cleaned_data$subject_age, 0.25)
Q3_subject <- quantile(cleaned_data$subject_age, 0.75)
IQR_subject <- Q3_subject - Q1_subject
# Define lower and upper bounds for subject_age
lower_bound_subject <- Q1_subject - 1.5 * IQR_subject
upper_bound_subject <- Q3_subject + 1.5 * IQR_subject
# Filter out rows with outliers in subject_age
cleaned_data <- cleaned_data[cleaned_data$subject_age >= lower_bound_subject & cleaned_data$subject_age <= upper_bound_subject, ]
# Removing outliers from officer_age using IQR
Q1_officer <- quantile(cleaned_data$officer_age, 0.25)
Q3_officer <- quantile(cleaned_data$officer_age, 0.75)
IQR_officer <- Q3_officer - Q1_officer
# Define lower and upper bounds for officer_age
lower_bound_officer <- Q1_officer - 1.5 * IQR_officer
upper_bound_officer <- Q3_officer + 1.5 * IQR_officer
# Filter out rows with outliers in officer_age
cleaned_data <- cleaned_data[cleaned_data$officer_age >= lower_bound_officer & cleaned_data$officer_age <= upper_bound_officer, ]
nrow(cleaned_data)
summary(cleaned_data$subject_age)
summary(cleaned_data$officer_age)
summary(cleaned_data$subject_age)
summary(cleaned_data$officer_age)
str(cleaned_data)
# Removing outliers from subject_age using IQR
Q1_subject <- quantile(cleaned_data$subject_age, 0.25)
Q3_subject <- quantile(cleaned_data$subject_age, 0.75)
IQR_subject <- Q3_subject - Q1_subject
# Define lower and upper bounds for subject_age
lower_bound_subject <- Q1_subject - 1.5 * IQR_subject
upper_bound_subject <- Q3_subject + 1.5 * IQR_subject
# Filter out rows with outliers in subject_age
cleaned_data <- cleaned_data[cleaned_data$subject_age >= lower_bound_subject & cleaned_data$subject_age <= upper_bound_subject, ]
# Removing outliers from officer_age using IQR
Q1_officer <- quantile(cleaned_data$officer_age, 0.25)
Q3_officer <- quantile(cleaned_data$officer_age, 0.75)
IQR_officer <- Q3_officer - Q1_officer
# Define lower and upper bounds for officer_age
lower_bound_officer <- Q1_officer - 1.5 * IQR_officer
upper_bound_officer <- Q3_officer + 1.5 * IQR_officer
# Filter out rows with outliers in officer_age
cleaned_data <- cleaned_data[cleaned_data$officer_age >= lower_bound_officer & cleaned_data$officer_age <= upper_bound_officer, ]
nrow(cleaned_data)
summary(cleaned_data$subject_age)
summary(cleaned_data$officer_age)
str(cleaned_data)
dataset$subject_race <- as.numeric(factor(dataset$subject_race))
knitr::opts_chunk$set(echo = TRUE)
str(cleaned_data)
# Remove rows where subject_race or officer_race is "unknown"
cleaned_data <- cleaned_data[!(cleaned_data$subject_race == "unknown" | cleaned_data$officer_race == "unknown"), ]
# Ensure subject_race and officer_race are factors
cleaned_data$subject_race <- as.factor(cleaned_data$subject_race)
cleaned_data$officer_race <- as.factor(cleaned_data$officer_race)
str(cleaned_data)
str(cleaned_data$subject_race)
str(cleaned_data)
# Chi-Square test for association between subject_race and officer_race
chisq_result <- chisq.test(table(cleaned_data$subject_race, cleaned_data$officer_race))
# Print the result
chisq_result
str(cleaned_data)
# Perform ANOVA to check if officer race impacts subject race in determining arrests
anova_result <- aov(officer_age ~ subject_race * officer_race, data = cleaned_data)
# Print the summary of the ANOVA result
summary(anova_result)
tukey_result <- TukeyHSD(anova_result)
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
Sys.Date()
data=read.csv("Chicago Police Stops Dataset.csv")
data.head()
data=read.csv("Chicago Police Stops Dataset.csv")
head(data)
data=read.csv("Chicago Police Stops Dataset.csv")
head(data, 10)
boxplot(cleaned_data$officer_age ~ cleaned_data$officer_race, main="Officer Age vs Subject Race")
boxplot(cleaned_data$officer_age ~ cleaned_data$subject_race, main="Officer Age vs Subject Race")
boxplot(cleaned_data$officer_age ~ cleaned_data$officer_race, main="Officer Age Distribution by Age")
boxplot(cleaned_data$subject_age ~ cleaned_data$subject_race, main="Subject Age Distribution by Race")
library(bit64)
# Chi-Square test for association between subject_race and officer_race
chisq_result <- chisq.test(table(cleaned_data$subject_race, cleaned_data$officer_race))
# Print the result
cat("The chi-square result is", chisq_result,  "\n")
# Chi-Square test for association between subject_race and officer_race
chisq_result <- chisq.test(table(cleaned_data$subject_race, cleaned_data$officer_race))
# Print the result
cat("The chi-square result is", chisq_result)
# Chi-Square test for association between subject_race and officer_race
chisq_result <- chisq.test(table(cleaned_data$subject_race, cleaned_data$officer_race))
# Extracting chi-square statistic and p-value
chi_square_statistic <- chisq_result$statistic
p_value <- chisq_result$p.value
# Print the result
cat("The chi-square statistic is", chi_square_statistic, "and the p-value is", p_value, "\n")
# Chi-Square test for association between subject_race and officer_race
chisq_result <- chisq.test(table(cleaned_data$subject_race, cleaned_data$officer_race))
print(chisq_result)
# Performing ANOVA to check if officer race impacts subject race in determining arrests
anova_result <- aov(officer_age ~ subject_race * officer_race, data = cleaned_data)
summary(anova_result)
knitr::opts_chunk$set(echo = TRUE)
data=read.csv("Chicago Police Stops Dataset.csv")
data
str(data)
xkablesummary(data, title = "Summary of Dataset")
library(ezids)
xkablesummary(data, title = "Summary of Dataset")
colSums(is.na(data))
#removing missing values
cleaned_data<-na.omit(data)
str(cleaned_data)
xkablesummary(cleaned_data, title = "Summary of Cleaned Dataset")
colSums(is.na(cleaned_data))
barplot(table(cleaned_data$subject_race), main="Distribution of Stops by Race", col="lightblue")
boxplot(cleaned_data$subject_age ~ cleaned_data$subject_race, main="Age Distribution by Subject Race")
boxplot(cleaned_data$officer_age ~ cleaned_data$officer_race, main="Age Distribution by Officer Age")
cleansubject_age=outlierKD2(cleaned_data,subject_age,rm=TRUE,qqplt = TRUE)
cleanofficer_age=outlierKD2(cleaned_data,officer_age,rm=TRUE,qqplt = TRUE)
# Removing outliers from subject_age using IQR
Q1_subject <- quantile(cleaned_data$subject_age, 0.25)
Q3_subject <- quantile(cleaned_data$subject_age, 0.75)
IQR_subject <- Q3_subject - Q1_subject
# Define lower and upper bounds for subject_age
lower_bound_subject <- Q1_subject - 1.5 * IQR_subject
upper_bound_subject <- Q3_subject + 1.5 * IQR_subject
# Filter out rows with outliers in subject_age
cleaned_data <- cleaned_data[cleaned_data$subject_age >= lower_bound_subject & cleaned_data$subject_age <= upper_bound_subject, ]
# Removing outliers from officer_age using IQR
Q1_officer <- quantile(cleaned_data$officer_age, 0.25)
Q3_officer <- quantile(cleaned_data$officer_age, 0.75)
IQR_officer <- Q3_officer - Q1_officer
# Define lower and upper bounds for officer_age
lower_bound_officer <- Q1_officer - 1.5 * IQR_officer
upper_bound_officer <- Q3_officer + 1.5 * IQR_officer
# Filter out rows with outliers in officer_age
cleaned_data <- cleaned_data[cleaned_data$officer_age >= lower_bound_officer & cleaned_data$officer_age <= upper_bound_officer, ]
nrow(cleaned_data)
summary(cleaned_data$subject_age)
summary(cleaned_data$officer_age)
# Removing rows where subject_race or officer_race is "unknown"
cleaned_data <- cleaned_data[!(cleaned_data$subject_race == "unknown" | cleaned_data$officer_race == "unknown"), ]
# Ensuring subject_race and officer_race are factors
cleaned_data$subject_race <- as.factor(cleaned_data$subject_race)
cleaned_data$officer_race <- as.factor(cleaned_data$officer_race)
# Chi-Square test for association between subject_race and officer_race
chisq_result <- chisq.test(table(cleaned_data$subject_race, cleaned_data$officer_race))
print(chisq_result)
# Performing ANOVA to check if officer race impacts subject race in determining arrests
anova_result <- aov(officer_age ~ subject_race * officer_race, data = cleaned_data)
summary(anova_result)
knitr::opts_chunk$set(echo = TRUE)
ggplot(cleaned_data, aes(x = subject_race)) +
geom_bar(fill = "steelblue", color = "black") +
labs(title = "Distribution of Police Stops by Subject Race", x = "Subject Race", y = "Count") +
theme_minimal()
library(ggplot2)
ggplot(cleaned_data, aes(x = subject_race)) +
geom_bar(fill = "steelblue", color = "black") +
labs(title = "Distribution of Police Stops by Subject Race", x = "Subject Race", y = "Count") +
theme_minimal()
ggplot(cleaned_data, aes(x = officer_race)) +
geom_bar(fill = "coral", color = "black") +
labs(title = "Distribution of Police Stops by Officer Race", x = "Officer Race", y = "Count") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race)) +
geom_bar(fill = "steelblue", color = "black") +
labs(title = "Distribution of Police Stops by Subject Race", x = "Subject Race", y = "Count") +
theme_minimal()
ggplot(cleaned_data, aes(x = officer_race)) +
geom_bar(fill = "coral", color = "black") +
labs(title = "Distribution of Police Stops by Officer Race", x = "Officer Race", y = "Count") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_race)) +
geom_boxplot() +
labs(title = "Age Distribution by Subject Race", x = "Subject Race", y = "Subject Age") +
theme_minimal()
ggplot(cleaned_data, aes(x = officer_race, y = officer_age, fill = officer_race)) +
geom_boxplot() +
labs(title = "Age Distribution by Officer Race", x = "Officer Race", y = "Officer Age") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_race)) +
geom_boxplot() +
labs(title = "Age Distribution by Subject Race", x = "Subject Race", y = "Subject Age") +
theme_minimal()
ggplot(cleaned_data, aes(x = officer_race, y = officer_age, fill = officer_race)) +
geom_boxplot() +
labs(title = "Age Distribution by Officer Race", x = "Officer Race", y = "Officer Age") +
theme_minimal()
# Create a table of counts for subject race and officer race
race_correlation <- as.data.frame(table(cleaned_data$subject_race, cleaned_data$officer_race))
# Plot heatmap
ggplot(race_correlation, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Correlation between Subject and Officer Race", x = "Subject Race", y = "Officer Race", fill = "Count") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_race)) +
geom_violin(trim = FALSE) +
labs(title = "Violin Plot of Age Distribution by Subject Race", x = "Subject Race", y = "Subject Age") +
theme_minimal()
ggplot(cleaned_data, aes(x = officer_age, y = subject_age, color = subject_race)) +
geom_point(alpha = 0.6) +
labs(title = "Relation between Officer Age and Subject Age", x = "Officer Age", y = "Subject Age") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_race)) +
geom_violin(trim = FALSE) +
labs(title = "Violin Plot of Age Distribution by Subject Race", x = "Subject Race", y = "Subject Age") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_race)) +
geom_violin(trim = FALSE) +
labs(title = "Age Distribution by Subject Race", x = "Subject Race", y = "Subject Age") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
barplot(table(cleaned_data$subject_race), main="Distribution of Stops bySubject Race", col="lightblue", xlab="Subject Race", ylab="Count")
barplot(table(cleaned_data$officer_race), main="Distribution of Stops by Officer Race", col="lightcoral", xlab="Officer Race", ylab="Count")
barplot(table(cleaned_data$subject_sex), main="Distribution of Stops by Subject Sex",
col="lightgreen", xlab="Subject Sex", ylab="Count")
barplot(table(cleaned_data$officer_sex), main="Distribution of Stops by Officer Sex", col="lightpink", xlab="Officer Sex", ylab="Count")
hist(cleaned_data$subject_age, main="Distribution of Subject Age", col="lightyellow", xlab="Subject Age", ylab="Frequency", breaks=10)
hist(cleaned_data$officer_age, main="Distribution of Officer Age", col="lightblue",
xlab="Officer Age", ylab="Frequency")
ggplot(cleaned_data, aes(x = subject_race)) +
geom_bar(fill = "steelblue", color = "black") +
labs(title = "Distribution of Police Stops by Subject Race", x = "Subject Race", y = "Count") +
theme_minimal()
library(ggplot2)
ggplot(cleaned_data, aes(x = subject_race)) +
geom_bar(fill = "steelblue", color = "black") +
labs(title = "Distribution of Police Stops by Subject Race", x = "Subject Race", y = "Count") +
theme_minimal()
# Assuming your dataset is called 'arrest_data' and has columns: OfficerGender, OfficerAge, and SubjectRace
ggplot(arrest_data, aes(x = OfficerAge, fill = SubjectRace)) +
geom_bar(position = "fill") +
facet_wrap(~ OfficerGender) +
scale_y_continuous(labels = scales::percent) +
labs(title = "Proportion of Subject Race by Officer Age and Gender",
x = "Officer Age", y = "Proportion of Subjects Arrested",
fill = "Subject Race") +
theme_minimal()
# Assuming your dataset is called 'arrest_data' and has columns: OfficerGender, OfficerAge, and SubjectRace
ggplot(cleaned_data, aes(x = officer_age, fill = subject_race)) +
geom_bar(position = "fill") +
facet_wrap(~ officer_gender) +
scale_y_continuous(labels = scales::percent) +
labs(title = "Proportion of Subject Race by Officer Age and Gender",
x = "Officer Age", y = "Proportion of Subjects Arrested",
fill = "Subject Race") +
theme_minimal()
# Assuming your dataset is called 'arrest_data' and has columns: OfficerGender, OfficerAge, and SubjectRace
ggplot(cleaned_data, aes(x = officer_age, fill = subject_race)) +
geom_bar(position = "fill") +
facet_wrap(~ officer_sex) +
scale_y_continuous(labels = scales::percent) +
labs(title = "Proportion of Subject Race by Officer Age and Gender",
x = "Officer Age", y = "Proportion of Subjects Arrested",
fill = "Subject Race") +
theme_minimal()
ggplot(arrest_data, aes(x = SubjectRace, y = SubjectAge, fill = SubjectGender)) +
geom_violin(scale = "width", trim = FALSE) +
geom_boxplot(width = 0.1, position = position_dodge(width = 0.9)) +
labs(title = "Distribution of Subject Age by Race and Gender",
x = "Subject Race", y = "Subject Age", fill = "Subject Gender") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_Age, fill = subject_Sex)) +
geom_violin(scale = "width", trim = FALSE) +
geom_boxplot(width = 0.1, position = position_dodge(width = 0.9)) +
labs(title = "Distribution of Subject Age by Race and Gender",
x = "Subject Race", y = "Subject Age", fill = "Subject Gender") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_Sex)) +
geom_violin(scale = "width", trim = FALSE) +
geom_boxplot(width = 0.1, position = position_dodge(width = 0.9)) +
labs(title = "Distribution of Subject Age by Race and Gender",
x = "Subject Race", y = "Subject Age", fill = "Subject Gender") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_sex)) +
geom_violin(scale = "width", trim = FALSE) +
geom_boxplot(width = 0.1, position = position_dodge(width = 0.9)) +
labs(title = "Distribution of Subject Age by Race and Gender",
x = "Subject Race", y = "Subject Age", fill = "Subject Gender") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_race)) +
geom_violin(trim = FALSE) +
labs(title = "Age Distribution by Subject Race", x = "Subject Race", y = "Subject Age") +
theme_minimal()
ggplot(cleaned_data, aes(x = officer_race, y = officer_age, fill = officer_race)) +
geom_boxplot() +
labs(title = "Age Distribution by Officer Race", x = "Officer Race", y = "Officer Age") +
theme_minimal()
# Create a table of counts for subject race and officer race
race_correlation <- as.data.frame(table(cleaned_data$subject_race, cleaned_data$officer_race))
# Plot heatmap
ggplot(race_correlation, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Correlation between Subject and Officer Race", x = "Subject Race", y = "Officer Race", fill = "Count") +
theme_minimal()
ggplot(cleaned_data, aes(x = subject_race, y = subject_age, fill = subject_sex)) +
geom_violin(scale = "width", trim = FALSE) +
geom_boxplot(width = 0.1, position = position_dodge(width = 0.9)) +
labs(title = "Distribution of Subject Age by Race and Gender",
x = "Subject Race", y = "Subject Age", fill = "Subject Gender") +
theme_minimal()
ggplot(cleaned_data, aes(x = officer_race)) +
geom_bar(fill = "coral", color = "black") +
labs(title = "Distribution of Police Stops by Officer Race", x = "Officer Race", y = "Count") +
theme_minimal()
# Create a table of counts for subject race and officer race
race_correlation <- as.data.frame(table(cleaned_data$subject_race, cleaned_data$officer_race))
# Plot heatmap
ggplot(race_correlation, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red") +
labs(title = "Correlation between Subject and Officer Race", x = "Subject Race", y = "Officer Race", fill = "Count") +
theme_minimal()
# Chi-Square test for association between subject_race and officer_race
chisq_result <- chisq.test(table(cleaned_data$subject_race, cleaned_data$officer_race))
print(chisq_result)
# Performing ANOVA to check if officer race impacts subject race in determining arrests
anova_result <- aov(officer_age ~ subject_race * officer_race, data = cleaned_data)
summary(anova_result)
# Chi-Square test for association between officer_sex and subject_race
chisq_result <- chisq.test(table(cleaned_data$officer_sex, cleaned_data$subject_race))
print(chisq_result)
knitr::opts_chunk$set(echo = TRUE)
# Plot heatmap
ggplot(race_correlation, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "plasma") +
labs(title = "Correlation between Subject and Officer Race", x = "Subject Race", y = "Officer Race", fill = "Count") +
theme_minimal()
library(ggplot2)
# Plot heatmap
ggplot(race_correlation, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "plasma") +
labs(title = "Correlation between Subject and Officer Race", x = "Subject Race", y = "Officer Race", fill = "Count") +
theme_minimal()
# Plot heatmap
ggplot(race_correlation, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile(color = "black") +  # Add black borders
scale_fill_gradient(low = "white", high = "lightblue") +  # Subtle color scheme
labs(title = "Correlation between Subject and Officer Race",
x = "Subject Race",
y = "Officer Race",
fill = "Count") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ezids)
library(ggplot2)
library(dplyr)
library(leaflet)
data=read.csv("il_chicago_2023_01_26.csv")
data=read.csv("il_chicago_2023_01_26.csv")
head(data, 5)
str(data)
xkablesummary(data, title = "Summary of Dataset")
data2 <- data[!(data$subject_race %in% c("unknown", "other") | data$officer_race %in% c("unknown", "other")), ]
nrow(data2)
colSums(is.na(data2))
#removing missing values
cleaned_data<-na.omit(data2)
str(cleaned_data)
xkablesummary(cleaned_data, title = "Summary of Cleaned Dataset")
colSums(is.na(cleaned_data))
ggplot(cleaned_data, aes(x = subject_race, y = subject_age)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Subject Age Distribution by Race", x = "Subject Race", y = "Subject Age") +
theme_minimal()
ggplot(cleaned_data, aes(x = officer_race, y = officer_age)) +
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs(title = "Subject Age Distribution by Race", x = "Officer Race", y = "Officer Age") +
theme_minimal()
cleansubject_age=outlierKD2(cleaned_data,subject_age,rm=TRUE,qqplt = TRUE)
cleanofficer_age=outlierKD2(cleaned_data,officer_age,rm=TRUE,qqplt = TRUE)
Q1_subject <- quantile(cleaned_data$subject_age, 0.25)
Q3_subject <- quantile(cleaned_data$subject_age, 0.75)
IQR_subject <- Q3_subject - Q1_subject
lower_bound_subject <- Q1_subject - 1.5 * IQR_subject
upper_bound_subject <- Q3_subject + 1.5 * IQR_subject
cleaned_data <- cleaned_data[cleaned_data$subject_age >= lower_bound_subject & cleaned_data$subject_age <= upper_bound_subject, ]
Q1_officer <- quantile(cleaned_data$officer_age, 0.25)
Q3_officer <- quantile(cleaned_data$officer_age, 0.75)
IQR_officer <- Q3_officer - Q1_officer
lower_bound_officer <- Q1_officer - 1.5 * IQR_officer
upper_bound_officer <- Q3_officer + 1.5 * IQR_officer
cleaned_data <- cleaned_data[cleaned_data$officer_age >= lower_bound_officer & cleaned_data$officer_age <= upper_bound_officer, ]
nrow(cleaned_data)
summary(cleaned_data$subject_age)
summary(cleaned_data$officer_age)
top_violations <- cleaned_data %>%
count(violation, sort = TRUE) %>%
top_n(10, n)
final_data <- cleaned_data %>%
filter(violation %in% top_violations$violation)
str(final_data)
head(final_data, 10)
print(unique(final_data$violation))
